services:
  # PostgreSQL Database - Ottimizzato per produzione
  postgres:
    image: postgres:16-alpine
    container_name: iss-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: iss_wbs
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      PGDATA: /var/lib/postgresql/data/pgdata
      # Ottimizzazioni PostgreSQL
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    networks:
      - iss-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d iss_wbs"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis - Ottimizzato per caching e sessioni
  redis:
    image: redis:7-alpine
    container_name: iss-redis
    restart: unless-stopped
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 256mb 
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_PORT:-6380}:6379"
    networks:
      - iss-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # ISS Backend API - Ottimizzato per produzione
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
      target: production
    container_name: iss-backend
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql+asyncpg://postgres:${POSTGRES_PASSWORD:-postgres123}@postgres:5432/iss_wbs
      DATABASE_POOL_SIZE: 20
      DATABASE_MAX_OVERFLOW: 30
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-in-production-please}
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      REDIS_CACHE_TTL: 3600
      
      # Environment
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DEBUG: ${DEBUG:-false}
      
      # CORS
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3001,http://localhost:3000,https://iss-aps.it}
      
      # Email ottimizzato
      MAIL_USERNAME: ${MAIL_USERNAME:-}
      MAIL_PASSWORD: ${MAIL_PASSWORD:-}
      MAIL_FROM: ${MAIL_FROM:-noreply@iss-aps.it}
      MAIL_SERVER: ${MAIL_SERVER:-smtp.gmail.com}
      MAIL_PORT: ${MAIL_PORT:-587}
      MAIL_STARTTLS: ${MAIL_STARTTLS:-true}
      
      # Upload e storage
      UPLOAD_DIR: /app/static/uploads
      MAX_UPLOAD_SIZE: 10485760  # 10MB
      
      # Performance
      WORKERS: 4
      WORKER_CONNECTIONS: 1000
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: json
      
      # Rate limiting
      RATE_LIMIT_PER_MINUTE: 60
      
    volumes:
      - backend_uploads:/app/static/uploads
      - backend_logs:/app/logs
      - ./config/backend:/app/config:ro
    ports:
      - "${BACKEND_PORT:-8001}:8000"
    networks:
      - iss-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # PgAdmin for database management (disabled - causing restart issues)
  # pgadmin:
  #   image: dpage/pgadmin4:latest
  #   container_name: iss-pgadmin
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: admin@iss.local
  #     PGADMIN_DEFAULT_PASSWORD: admin123
  #     PGADMIN_CONFIG_SERVER_MODE: 'False'
  #   volumes:
  #     - pgadmin_data:/var/lib/pgadmin
  #   ports:
  #     - "5050:80"
  #   networks:
  #     - iss-network
  #   depends_on:
  #     - postgres

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: iss-redis-commander
    environment:
      REDIS_HOSTS: redis:redis:6379
      HTTP_USER: admin
      HTTP_PASSWORD: admin123
    ports:
      - "8082:8081"
    networks:
      - iss-network
    depends_on:
      - redis

  # ISS Frontend - React + Nginx ottimizzato
  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
      target: production
    container_name: iss-frontend
    restart: unless-stopped
    environment:
      - VITE_API_BASE_URL=${FRONTEND_API_URL:-/api}
      - VITE_ENVIRONMENT=${ENVIRONMENT:-production}
      - VITE_APP_NAME=ISS - Innovazione Sociale Salernitana
      - VITE_APP_VERSION=2.0.0
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
    ports:
      - "${FRONTEND_PORT:-3001}:80"
    networks:
      - iss-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Nginx Reverse Proxy (Opzionale per produzione)
  nginx-proxy:
    image: nginx:1.25-alpine
    container_name: iss-nginx-proxy
    restart: unless-stopped
    ports:
      - "${PROXY_PORT:-80}:80"
      - "${PROXY_SSL_PORT:-443}:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - iss-network
    depends_on:
      - frontend
      - backend
    profiles:
      - production
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # MailHog per testing email (solo development)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: iss-mailhog
    restart: unless-stopped
    ports:
      - "${MAILHOG_SMTP_PORT:-1026}:1025"  # SMTP
      - "${MAILHOG_WEB_PORT:-8026}:8025"   # Web UI
    networks:
      - iss-network
    profiles:
      - development
    deploy:
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 32M

volumes:
  # Database persistente
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/postgres
  
  # Cache Redis
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/redis
  
  # Upload files backend
  backend_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/uploads
  
  # Logs backend
  backend_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/logs
  
  # Logs nginx proxy
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/nginx-logs

networks:
  iss-network:
    driver: bridge
    name: iss-network
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: iss-bridge
      com.docker.network.driver.mtu: 1500
